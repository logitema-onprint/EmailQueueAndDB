generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String   @id
  firstName          String
  lastName           String
  fullName           String
  company            String?
  email              String
  phoneNumber        String
  totalOrders        Int      @default(0)
  totalSpend         Decimal  @default(0) @db.Decimal(10, 2)
  totalSpendAfterTax Decimal  @default(0) @db.Decimal(10, 2)
  registerDate       String
  rewardPoints       String?
  extrafields        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  orders             Order[]

  @@index([id])
  @@index([email])
  @@index([phoneNumber])
}

model Order {
  id                Int            @id
  orderNumber       String
  userId            String
  phoneNumber       String
  userName          String
  userSurname       String?
  companyName       String?
  paymentMethodName String
  totalAmount       Float
  salesAgentId      Int
  country           String
  city              String
  customerId        String
  isLast            Boolean
  productNames      String[]
  productIds        String[]
  orderDate         String
  paymentStatus     String
  email             String
  jobs              Job[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  customer          Customer       @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderProduct      OrderProduct[]

  @@index([salesAgentId])
  @@index([country])
  @@index([totalAmount])
  @@index([userId])
  @@index([customerId])
}

model Product {
  id                   String         @id
  productName          String
  productTitle         String
  totalOrderedQuantity Int            @default(0)
  totalOrderCount      Int            @default(0)
  totalRevenue         Decimal        @default(0) @db.Decimal(10, 2)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  orderProducts        OrderProduct[]

  @@index([id])
}

model SalesAgent {
  id          Int    @id @default(autoincrement())
  name        String
  phoneNumber String
  fullText    String
  orderCount  Int    @default(0)
}

model OrderProduct {
  id                 Int     @id @default(autoincrement())
  orderId            Int
  productId          String
  salesAgentId       Int
  salesAgentFullText String
  quantity           Int
  totalAmount        Decimal @default(0) @db.Decimal(10, 2)
  orderDate          String
  country            String
  city               String
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@index([orderDate])
  @@index([country])
  @@index([salesAgentId])
}

model Country {
  id          Int      @id @default(autoincrement())
  countryName String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([countryName])
}

model Rule {
  id        Int      @id @default(autoincrement())
  ruleName  String
  tags      Int[]
  ruleType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           Int      @id @default(autoincrement())
  tagName      String
  scheduledFor BigInt
  jobsCount    Int      @default(0)
  tagType      String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  templateId   Int?
  templateName String?

  @@index([tagName])
}

model Job {
  id           String    @id
  orderId      Int?
  tagId        Int
  tagName      String
  status       String
  scheduledFor BigInt
  attempts     Int       @default(0)
  error        String?
  processedAt  DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  order        Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status, createdAt])
  @@index([tagId, status, createdAt])
  @@index([orderId, status, createdAt])
  @@index([orderId, tagId, status])
}

model Template {
  id           Int      @id @default(autoincrement())
  templateName String   @unique
  subject      String
  type         String
  jsonUrl      String
  htmlUrl      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([templateName])
}
